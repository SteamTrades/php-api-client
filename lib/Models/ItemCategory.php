<?php
/**
 * ItemCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  SteamTrades
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SteamTrades API
 *
 * API Explorer for SteamTrades' RESTful API.
 *
 * OpenAPI spec version: 1.0
 * Contact: devs@steamtrad.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SteamTrades\Models;

use \ArrayAccess;

/**
 * ItemCategory Class Doc Comment
 *
 * @category    Class
 * @description Information about a kind of item
 * @package     SteamTrades
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemCategory implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'preview_url' => 'string',
        'context' => 'string',
        'steam_market_hash' => 'string',
        'steam_name_color' => 'string',
        'steam_accent_color' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'preview_url' => 'preview_url',
        'context' => 'context',
        'steam_market_hash' => 'steam_market_hash',
        'steam_name_color' => 'steam_name_color',
        'steam_accent_color' => 'steam_accent_color'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'preview_url' => 'setPreviewUrl',
        'context' => 'setContext',
        'steam_market_hash' => 'setSteamMarketHash',
        'steam_name_color' => 'setSteamNameColor',
        'steam_accent_color' => 'setSteamAccentColor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'preview_url' => 'getPreviewUrl',
        'context' => 'getContext',
        'steam_market_hash' => 'getSteamMarketHash',
        'steam_name_color' => 'getSteamNameColor',
        'steam_accent_color' => 'getSteamAccentColor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['preview_url'] = isset($data['preview_url']) ? $data['preview_url'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['steam_market_hash'] = isset($data['steam_market_hash']) ? $data['steam_market_hash'] : null;
        $this->container['steam_name_color'] = isset($data['steam_name_color']) ? $data['steam_name_color'] : null;
        $this->container['steam_accent_color'] = isset($data['steam_accent_color']) ? $data['steam_accent_color'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['preview_url'] === null) {
            $invalid_properties[] = "'preview_url' can't be null";
        }
        if ($this->container['context'] === null) {
            $invalid_properties[] = "'context' can't be null";
        }
        if ($this->container['steam_market_hash'] === null) {
            $invalid_properties[] = "'steam_market_hash' can't be null";
        }
        if ($this->container['steam_name_color'] === null) {
            $invalid_properties[] = "'steam_name_color' can't be null";
        }
        if ($this->container['steam_accent_color'] === null) {
            $invalid_properties[] = "'steam_accent_color' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['preview_url'] === null) {
            return false;
        }
        if ($this->container['context'] === null) {
            return false;
        }
        if ($this->container['steam_market_hash'] === null) {
            return false;
        }
        if ($this->container['steam_name_color'] === null) {
            return false;
        }
        if ($this->container['steam_accent_color'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Category name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets preview_url
     * @return string
     */
    public function getPreviewUrl()
    {
        return $this->container['preview_url'];
    }

    /**
     * Sets preview_url
     * @param string $preview_url Preview URL for items of this kind (max. resolution)
     * @return $this
     */
    public function setPreviewUrl($preview_url)
    {
        $this->container['preview_url'] = $preview_url;

        return $this;
    }

    /**
     * Gets context
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     * @param string $context ID of the inventory context this item kind is associated with
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets steam_market_hash
     * @return string
     */
    public function getSteamMarketHash()
    {
        return $this->container['steam_market_hash'];
    }

    /**
     * Sets steam_market_hash
     * @param string $steam_market_hash Steam market hash
     * @return $this
     */
    public function setSteamMarketHash($steam_market_hash)
    {
        $this->container['steam_market_hash'] = $steam_market_hash;

        return $this;
    }

    /**
     * Gets steam_name_color
     * @return string
     */
    public function getSteamNameColor()
    {
        return $this->container['steam_name_color'];
    }

    /**
     * Sets steam_name_color
     * @param string $steam_name_color Name color as defined by Steam
     * @return $this
     */
    public function setSteamNameColor($steam_name_color)
    {
        $this->container['steam_name_color'] = $steam_name_color;

        return $this;
    }

    /**
     * Gets steam_accent_color
     * @return string
     */
    public function getSteamAccentColor()
    {
        return $this->container['steam_accent_color'];
    }

    /**
     * Sets steam_accent_color
     * @param string $steam_accent_color Accent color (e.g. rarity color for CS:GO).
     * @return $this
     */
    public function setSteamAccentColor($steam_accent_color)
    {
        $this->container['steam_accent_color'] = $steam_accent_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SteamTrades\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SteamTrades\ObjectSerializer::sanitizeForSerialization($this));
    }
}


