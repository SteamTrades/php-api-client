<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  SteamTrades
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SteamTrades API
 *
 * API Explorer for SteamTrades' RESTful API.
 *
 * OpenAPI spec version: 1.0
 * Contact: devs@steamtrad.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SteamTrades\Models;

use \ArrayAccess;

/**
 * Item Class Doc Comment
 *
 * @category    Class
 * @description Information about an item in a SteamTrades inventory
 * @package     SteamTrades
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Item implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'asset_id' => 'string',
        'category' => '\SteamTrades\Models\ItemCategory',
        'locked' => 'bool',
        'lock_reason' => 'string',
        'steam_class_id' => 'string',
        'steam_instance_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'asset_id' => 'asset_id',
        'category' => 'category',
        'locked' => 'locked',
        'lock_reason' => 'lock_reason',
        'steam_class_id' => 'steam_class_id',
        'steam_instance_id' => 'steam_instance_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'asset_id' => 'setAssetId',
        'category' => 'setCategory',
        'locked' => 'setLocked',
        'lock_reason' => 'setLockReason',
        'steam_class_id' => 'setSteamClassId',
        'steam_instance_id' => 'setSteamInstanceId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'asset_id' => 'getAssetId',
        'category' => 'getCategory',
        'locked' => 'getLocked',
        'lock_reason' => 'getLockReason',
        'steam_class_id' => 'getSteamClassId',
        'steam_instance_id' => 'getSteamInstanceId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LOCK_REASON_NOT_LOCKED = 'not_locked';
    const LOCK_REASON_ACTIVE_TRADE = 'active_trade';
    const LOCK_REASON_ADMIN = 'admin';
    const LOCK_REASON_DISABLED_BOT = 'disabled_bot';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLockReasonAllowableValues()
    {
        return [
            self::LOCK_REASON_NOT_LOCKED,
            self::LOCK_REASON_ACTIVE_TRADE,
            self::LOCK_REASON_ADMIN,
            self::LOCK_REASON_DISABLED_BOT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['lock_reason'] = isset($data['lock_reason']) ? $data['lock_reason'] : null;
        $this->container['steam_class_id'] = isset($data['steam_class_id']) ? $data['steam_class_id'] : null;
        $this->container['steam_instance_id'] = isset($data['steam_instance_id']) ? $data['steam_instance_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['asset_id'] === null) {
            $invalid_properties[] = "'asset_id' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalid_properties[] = "'locked' can't be null";
        }
        if ($this->container['lock_reason'] === null) {
            $invalid_properties[] = "'lock_reason' can't be null";
        }
        $allowed_values = ["not_locked", "active_trade", "admin", "disabled_bot"];
        if (!in_array($this->container['lock_reason'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'lock_reason', must be one of 'not_locked', 'active_trade', 'admin', 'disabled_bot'.";
        }

        if ($this->container['steam_class_id'] === null) {
            $invalid_properties[] = "'steam_class_id' can't be null";
        }
        if ($this->container['steam_instance_id'] === null) {
            $invalid_properties[] = "'steam_instance_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['asset_id'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        if ($this->container['locked'] === null) {
            return false;
        }
        if ($this->container['lock_reason'] === null) {
            return false;
        }
        $allowed_values = ["not_locked", "active_trade", "admin", "disabled_bot"];
        if (!in_array($this->container['lock_reason'], $allowed_values)) {
            return false;
        }
        if ($this->container['steam_class_id'] === null) {
            return false;
        }
        if ($this->container['steam_instance_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Our item ID used to identify the item on all of our API endpoints
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets asset_id
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     * @param string $asset_id Current Steam asset ID of this item. Changes in trades.
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets category
     * @return \SteamTrades\Models\ItemCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \SteamTrades\Models\ItemCategory $category Item category this item belongs to
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets locked
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     * @param bool $locked `true` if the item is locked, else `false`
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets lock_reason
     * @return string
     */
    public function getLockReason()
    {
        return $this->container['lock_reason'];
    }

    /**
     * Sets lock_reason
     * @param string $lock_reason `active_trade` is encountered when the item is currently subject of an active trade. The kind of circumstances required to cause an `admin` lock are extremely rare and notifications are sent to our staff. If an item is admin-locked for a longer duration, please contact our support. `disabled_bot` may occurr if there are temporary problems with the bot holding the item.
     * @return $this
     */
    public function setLockReason($lock_reason)
    {
        $allowed_values = array('not_locked', 'active_trade', 'admin', 'disabled_bot');
        if ((!in_array($lock_reason, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'lock_reason', must be one of 'not_locked', 'active_trade', 'admin', 'disabled_bot'");
        }
        $this->container['lock_reason'] = $lock_reason;

        return $this;
    }

    /**
     * Gets steam_class_id
     * @return string
     */
    public function getSteamClassId()
    {
        return $this->container['steam_class_id'];
    }

    /**
     * Sets steam_class_id
     * @param string $steam_class_id Steam item class ID
     * @return $this
     */
    public function setSteamClassId($steam_class_id)
    {
        $this->container['steam_class_id'] = $steam_class_id;

        return $this;
    }

    /**
     * Gets steam_instance_id
     * @return string
     */
    public function getSteamInstanceId()
    {
        return $this->container['steam_instance_id'];
    }

    /**
     * Sets steam_instance_id
     * @param string $steam_instance_id Steam item instance ID
     * @return $this
     */
    public function setSteamInstanceId($steam_instance_id)
    {
        $this->container['steam_instance_id'] = $steam_instance_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SteamTrades\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SteamTrades\ObjectSerializer::sanitizeForSerialization($this));
    }
}


